/**
 */
package egeo.gpx.groundspeak.provider;

import egeo.gpx.groundspeak.util.GroundspeakAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GroundspeakItemProviderAdapterFactory extends GroundspeakAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GroundspeakItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.AttributesType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributesTypeItemProvider attributesTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.AttributesType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributesTypeAdapter() {
		if (attributesTypeItemProvider == null) {
			attributesTypeItemProvider = new AttributesTypeItemProvider(this);
		}

		return attributesTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.AttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeItemProvider attributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.AttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdapter() {
		if (attributeTypeItemProvider == null) {
			attributeTypeItemProvider = new AttributeTypeItemProvider(this);
		}

		return attributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.CacheType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CacheTypeItemProvider cacheTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.CacheType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCacheTypeAdapter() {
		if (cacheTypeItemProvider == null) {
			cacheTypeItemProvider = new CacheTypeItemProvider(this);
		}

		return cacheTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.FinderType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinderTypeItemProvider finderTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.FinderType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinderTypeAdapter() {
		if (finderTypeItemProvider == null) {
			finderTypeItemProvider = new FinderTypeItemProvider(this);
		}

		return finderTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.LogsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogsTypeItemProvider logsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.LogsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogsTypeAdapter() {
		if (logsTypeItemProvider == null) {
			logsTypeItemProvider = new LogsTypeItemProvider(this);
		}

		return logsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.LogType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogTypeItemProvider logTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.LogType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogTypeAdapter() {
		if (logTypeItemProvider == null) {
			logTypeItemProvider = new LogTypeItemProvider(this);
		}

		return logTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.LogWptType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LogWptTypeItemProvider logWptTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.LogWptType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLogWptTypeAdapter() {
		if (logWptTypeItemProvider == null) {
			logWptTypeItemProvider = new LogWptTypeItemProvider(this);
		}

		return logWptTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.LongDescriptionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LongDescriptionTypeItemProvider longDescriptionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.LongDescriptionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLongDescriptionTypeAdapter() {
		if (longDescriptionTypeItemProvider == null) {
			longDescriptionTypeItemProvider = new LongDescriptionTypeItemProvider(this);
		}

		return longDescriptionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.OwnerType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OwnerTypeItemProvider ownerTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.OwnerType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOwnerTypeAdapter() {
		if (ownerTypeItemProvider == null) {
			ownerTypeItemProvider = new OwnerTypeItemProvider(this);
		}

		return ownerTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.ShortDescriptionType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ShortDescriptionTypeItemProvider shortDescriptionTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.ShortDescriptionType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createShortDescriptionTypeAdapter() {
		if (shortDescriptionTypeItemProvider == null) {
			shortDescriptionTypeItemProvider = new ShortDescriptionTypeItemProvider(this);
		}

		return shortDescriptionTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.TextType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextTypeItemProvider textTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.TextType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextTypeAdapter() {
		if (textTypeItemProvider == null) {
			textTypeItemProvider = new TextTypeItemProvider(this);
		}

		return textTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.TravelbugsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TravelbugsTypeItemProvider travelbugsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.TravelbugsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTravelbugsTypeAdapter() {
		if (travelbugsTypeItemProvider == null) {
			travelbugsTypeItemProvider = new TravelbugsTypeItemProvider(this);
		}

		return travelbugsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.groundspeak.TravelbugType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TravelbugTypeItemProvider travelbugTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.groundspeak.TravelbugType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTravelbugTypeAdapter() {
		if (travelbugTypeItemProvider == null) {
			travelbugTypeItemProvider = new TravelbugTypeItemProvider(this);
		}

		return travelbugTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (attributesTypeItemProvider != null) attributesTypeItemProvider.dispose();
		if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
		if (cacheTypeItemProvider != null) cacheTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (finderTypeItemProvider != null) finderTypeItemProvider.dispose();
		if (logsTypeItemProvider != null) logsTypeItemProvider.dispose();
		if (logTypeItemProvider != null) logTypeItemProvider.dispose();
		if (logWptTypeItemProvider != null) logWptTypeItemProvider.dispose();
		if (longDescriptionTypeItemProvider != null) longDescriptionTypeItemProvider.dispose();
		if (ownerTypeItemProvider != null) ownerTypeItemProvider.dispose();
		if (shortDescriptionTypeItemProvider != null) shortDescriptionTypeItemProvider.dispose();
		if (textTypeItemProvider != null) textTypeItemProvider.dispose();
		if (travelbugsTypeItemProvider != null) travelbugsTypeItemProvider.dispose();
		if (travelbugTypeItemProvider != null) travelbugTypeItemProvider.dispose();
	}

}
