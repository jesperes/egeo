/**
 */
package egeo.gpx.provider;

import egeo.gpx.util.GpxAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class GpxItemProviderAdapterFactory extends GpxAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public GpxItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.BoundsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoundsTypeItemProvider boundsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.BoundsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoundsTypeAdapter() {
		if (boundsTypeItemProvider == null) {
			boundsTypeItemProvider = new BoundsTypeItemProvider(this);
		}

		return boundsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.CopyrightType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CopyrightTypeItemProvider copyrightTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.CopyrightType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCopyrightTypeAdapter() {
		if (copyrightTypeItemProvider == null) {
			copyrightTypeItemProvider = new CopyrightTypeItemProvider(this);
		}

		return copyrightTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.EmailType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmailTypeItemProvider emailTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.EmailType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmailTypeAdapter() {
		if (emailTypeItemProvider == null) {
			emailTypeItemProvider = new EmailTypeItemProvider(this);
		}

		return emailTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.ExtensionsType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ExtensionsTypeItemProvider extensionsTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.ExtensionsType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createExtensionsTypeAdapter() {
		if (extensionsTypeItemProvider == null) {
			extensionsTypeItemProvider = new ExtensionsTypeItemProvider(this);
		}

		return extensionsTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.GpxType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GpxTypeItemProvider gpxTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.GpxType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGpxTypeAdapter() {
		if (gpxTypeItemProvider == null) {
			gpxTypeItemProvider = new GpxTypeItemProvider(this);
		}

		return gpxTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.LinkType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkTypeItemProvider linkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.LinkType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkTypeAdapter() {
		if (linkTypeItemProvider == null) {
			linkTypeItemProvider = new LinkTypeItemProvider(this);
		}

		return linkTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.MetadataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MetadataTypeItemProvider metadataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.MetadataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMetadataTypeAdapter() {
		if (metadataTypeItemProvider == null) {
			metadataTypeItemProvider = new MetadataTypeItemProvider(this);
		}

		return metadataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.PersonType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PersonTypeItemProvider personTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.PersonType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPersonTypeAdapter() {
		if (personTypeItemProvider == null) {
			personTypeItemProvider = new PersonTypeItemProvider(this);
		}

		return personTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.PtsegType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PtsegTypeItemProvider ptsegTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.PtsegType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPtsegTypeAdapter() {
		if (ptsegTypeItemProvider == null) {
			ptsegTypeItemProvider = new PtsegTypeItemProvider(this);
		}

		return ptsegTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.PtType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PtTypeItemProvider ptTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.PtType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPtTypeAdapter() {
		if (ptTypeItemProvider == null) {
			ptTypeItemProvider = new PtTypeItemProvider(this);
		}

		return ptTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.RteType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RteTypeItemProvider rteTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.RteType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRteTypeAdapter() {
		if (rteTypeItemProvider == null) {
			rteTypeItemProvider = new RteTypeItemProvider(this);
		}

		return rteTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.TrksegType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrksegTypeItemProvider trksegTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.TrksegType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrksegTypeAdapter() {
		if (trksegTypeItemProvider == null) {
			trksegTypeItemProvider = new TrksegTypeItemProvider(this);
		}

		return trksegTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.TrkType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrkTypeItemProvider trkTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.TrkType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrkTypeAdapter() {
		if (trkTypeItemProvider == null) {
			trkTypeItemProvider = new TrkTypeItemProvider(this);
		}

		return trkTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link egeo.gpx.WptType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected WptTypeItemProvider wptTypeItemProvider;

	/**
	 * This creates an adapter for a {@link egeo.gpx.WptType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createWptTypeAdapter() {
		if (wptTypeItemProvider == null) {
			wptTypeItemProvider = new WptTypeItemProvider(this);
		}

		return wptTypeItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (boundsTypeItemProvider != null) boundsTypeItemProvider.dispose();
		if (copyrightTypeItemProvider != null) copyrightTypeItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (emailTypeItemProvider != null) emailTypeItemProvider.dispose();
		if (extensionsTypeItemProvider != null) extensionsTypeItemProvider.dispose();
		if (gpxTypeItemProvider != null) gpxTypeItemProvider.dispose();
		if (linkTypeItemProvider != null) linkTypeItemProvider.dispose();
		if (metadataTypeItemProvider != null) metadataTypeItemProvider.dispose();
		if (personTypeItemProvider != null) personTypeItemProvider.dispose();
		if (ptsegTypeItemProvider != null) ptsegTypeItemProvider.dispose();
		if (ptTypeItemProvider != null) ptTypeItemProvider.dispose();
		if (rteTypeItemProvider != null) rteTypeItemProvider.dispose();
		if (trksegTypeItemProvider != null) trksegTypeItemProvider.dispose();
		if (trkTypeItemProvider != null) trkTypeItemProvider.dispose();
		if (wptTypeItemProvider != null) wptTypeItemProvider.dispose();
	}

}
